// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid() // @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @unique
  password   String
  first_name String
  last_name  String
  role       Role     @default(USER)
  telephone  Int      @unique()
  address    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([username, password])
}

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String
//   active      Boolean
//   attributes  Json
//   category_id Int
//   categoryId  Category @relation(fields: [category_id], references: [id])
//   // categories  Category[]

//   cost         Float
//   currency     String
//   date_created DateTime @default(now())
//   date_updated DateTime @updatedAt
//   discontinued Boolean
//   images       Json[]
//   meta_title   String // Page title used to override product name in storefronts.

//   meta_keywords    String // Page keywords used for search engine optimization purposes.
//   meta_description String // Page description used for search engine optimization purposes.
//   quantity_min     Int // Minimum quantity of the product that can be sold at once.
//   quantity_inc     Int // Specifies a quantify multiple the product must be sold in.
//   // related_product_ids String[] // of child_scalar: Array of related product IDs.
//   sku              String // REQUIRED. Stock keeping unit (SKU) used to track inventory in a warehouse.
//   slug             String // REQUIRED. Lowercase, hyphenated identifier typically used in URLs. When creating a product, a slugwill be generated automatically from the name. Maximum length of 1,000 characters.
//   stock            String[] // array of Stock: Expandable list of stock adjustments for the product.
//   stock_backorder  Boolean // Indicates whether the product can be backordered if out of stock.
//   stock_level      Int // Quantity of the product currently in stock (including all variants), based on the sum of the stock entries.
//   stock_preorder   Boolean // Indicates whether the product can be purchased as a preorder.
//   stock_status     String // enum AUTO: String indicating the product's stock status for the purpose of ordering. When stock_purchasable=true, an order can be placed for this product regardless of current stock status. Otherwise an order submission will be blocked unless stock status is available, preorder, or backorder.
//   stock_tracking   Boolean // Indicates whether the product has stock tracking enabled.
//   summary          String // A brief product summary.
//   tags             String // array of child_scalar: Array of searchable tags to aid in search discoverability.

//   type     String // Implies the ordering and fulfillment options available for the product. Can be standard, subscription, bundle, or giftcard. A standard product is a physical item that will be shipped to a customer.
//   variable Boolean // Indicates whether the product has variant generation enabled.
//   variants String[] // array of Variants: Expandable list of variants representing unique variations of the product. Each variant is a combination of one or more options. For example, Size and Color.
// }

// model Category {
//   id   Int    @id @default(autoincrement())
//   name String

//   productId String?
//   // Product   Product? @relation(fields: [productId], references: [id])
//   Product   Product[]
// }

// model Image {
//   id      String @id
//   caption String // A brief description of the image, intended for display as a caption or alt text.

//   file   File   @relation(fields: [fileId], references: [id]) // object: An object representing the image's source file
//   fileId String
// }

// model File {
//   id            String   @id // objectId: nique identifier for the file.
//   filename      String // string: Optional file name.
//   data          Bytes // filedata: A reference to the raw file data.
//   content_type  String // MIME content type of the file.
//   date_uploaded DateTime // date: Date the file was uploaded.
//   height        Int // Image height in pixels, if applicable.
//   length        Int // Size of the file in bytes.
//   metadata      Json // object: A set of arbitrary data that is typically used to store custom values.
//   md5           String // An MD5 hash of the file contents. This can be used to uniquely identify the file for caching purposes.
//   private       Boolean // Indicates whether the file is private.
//   url           String // A public URL to reference the file. Updated automatically if file content changes.
//   width         Int // Image width in pixels, if applicable.
//   Image         Image[]
// }

enum Role {
  ADMIN
  MANAGER
  USER
}
